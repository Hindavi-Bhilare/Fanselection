
package com.velotech.fanselection.models;
// Generated May 2, 2019 12:45:56 PM by Hibernate Tools 4.3.1.Final

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.ParamDef;

/**
 * Tbl01Fantype generated by hbm2java
 */
@Entity
@Table(name = "tbl_01_fantype", uniqueConstraints = @UniqueConstraint(columnNames = { "series", "company", "uuid" }))
@FilterDef(name = "company", parameters = { @ParamDef(name = "company", type = "java.lang.String") })
@Filter(name = "company", condition = ":company= company ")
public class Tbl01Fantype implements java.io.Serializable {

	private int id;

	private String uuid;

	private String series;

	private String fanType;

	private String bladeType;

	private String driveType;

	private String mounting;

	private String createdBy;

	private Date createdDate;

	private String modifiedBy;

	private Date modifiedDate;

	private String company;

	private Tbl90DocumentMaster documentMaster;

	private Tbl90DocumentMaster documentMasterImage;

	public Tbl01Fantype() {
	}

	public Tbl01Fantype(int id) {
		this.id = id;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public int getId() {

		return this.id;
	}

	public void setId(int id) {

		this.id = id;
	}

	@Column(name = "series", length = 50)
	public String getSeries() {

		return this.series;
	}

	public void setSeries(String series) {

		this.series = series;
	}

	@Column(name = "fanType", length = 200)
	public String getFanType() {

		return this.fanType;
	}

	public void setFanType(String fanType) {

		this.fanType = fanType;
	}

	@Column(name = "bladeType", length = 200)
	public String getBladeType() {
		return bladeType;
	}

	public void setBladeType(String bladeType) {
		this.bladeType = bladeType;
	}

	@Column(name = "driveType", length = 200)
	public String getDriveType() {
		return driveType;
	}

	public void setDriveType(String driveType) {
		this.driveType = driveType;
	}

	@Column(name = "mounting", length = 200)
	public String getMounting() {

		return this.mounting;
	}

	public void setMounting(String mounting) {

		this.mounting = mounting;
	}

	@Column(name = "createdBy", length = 50)
	public String getCreatedBy() {

		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {

		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "createdDate", length = 10)
	public Date getCreatedDate() {

		return this.createdDate;
	}

	public void setCreatedDate(Date createdDate) {

		this.createdDate = createdDate;
	}

	@Column(name = "modifiedBy", length = 50)
	public String getModifiedBy() {

		return this.modifiedBy;
	}

	public void setModifiedBy(String modifiedBy) {

		this.modifiedBy = modifiedBy;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "modifiedDate", length = 10)
	public Date getModifiedDate() {

		return this.modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {

		this.modifiedDate = modifiedDate;
	}

	@Column(name = "company", length = 50)
	public String getCompany() {

		return this.company;
	}

	public void setCompany(String company) {

		this.company = company;
	}

	@Column(name = "uuid", columnDefinition = "uniqueidentifier")
	public String getUuid() {
		return uuid;
	}

	public void setUuid(String uuid) {
		this.uuid = uuid;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "documentId")
	public Tbl90DocumentMaster getDocumentMaster() {
		return documentMaster;
	}

	public void setDocumentMaster(Tbl90DocumentMaster documentMaster) {
		this.documentMaster = documentMaster;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "imageId")
	public Tbl90DocumentMaster getDocumentMasterImage() {
		return documentMasterImage;
	}

	public void setDocumentMasterImage(Tbl90DocumentMaster documentMasterImage) {
		this.documentMasterImage = documentMasterImage;
	}

}
